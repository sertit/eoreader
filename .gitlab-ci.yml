stages:
  - lint
  - test
  - weekly_tests

variables:
  EO_CONTAINER: $REGISTRY_GITLAB/eo-containers
  EOREADER_CHANGES: eoreader/**/[^_]*.{py,xml}

lint:
  image: python:3.9-buster
  stage: lint
  script:
    - python -m pip install --upgrade pip
    - pip install ruff
    - ruff format && ruff check
  except:
    - tags

# Test with data on local disk
pytest:
  image: $EO_CONTAINER:geo_latest
  stage: test
  variables:
    CI_EOREADER_USE_S3: "0"
    EOREADER_USE_DASK: "1"
  before_script:
    - python -m pip install --upgrade pip
    - pip install --ignore-installed PyYAML
    - pip install -e .
  script:
    - python -m pytest -v --durations=0 --cov-report term --cov-report html:${CI_PROJECT_DIR}/cov_on_disk.html --cov=eoreader --cov-config=.coveragerc ci/on_push --log-cli-level DEBUG
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/cov_on_disk.html
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
  tags:
    - sertit
    - linux
    - high_memory
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - changes:
        - $EOREADER_CHANGES
        - ci/**/*.{py,xml}
        - .gitlab-ci.yml
        - pytest.ini
  needs: [ "lint" ]

# Test with data on S3
# TODO: create S3-specific CI ?
pytest_s3:
  image: $EO_CONTAINER:geo_latest
  stage: test
  variables:
    CI_EOREADER_USE_S3: "1"
    EOREADER_USE_DASK: "1"
  before_script:
    - python -m pip install --upgrade pip
    - pip install --ignore-installed PyYAML
    - pip install -e .
  script:
    - python -m pytest -v --durations=0 --cov-report term --cov-report html:${CI_PROJECT_DIR}/cov_s3.html --cov=eoreader --cov-config=.coveragerc ci/on_push --log-cli-level DEBUG --capture=tee-sys
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/cov_s3.html
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
  tags:
    - sertit
    - linux
    - high_memory
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - changes:
        - $EOREADER_CHANGES
        - ci/**/*.{py,xml}
        - .gitlab-ci.yml
        - pytest.ini
  needs: [ "lint" ]

# Test SNAP with SNAP
pytest_end_to_end:
  image: $EO_CONTAINER:geo_latest
  stage: test
  variables:
    CI_EOREADER_USE_S3: "0"
    EOREADER_USE_DASK: "1"
  before_script:
    - python -m pip install --upgrade pip
    - pip install --ignore-installed PyYAML
    - pip install -e .
  script:
    - python -m pytest -v --durations=0 --cov-report term --cov-report html:${CI_PROJECT_DIR}/cov_e2e.html --cov=eoreader  --cov-config=.coveragerc ci/weekly --log-cli-level DEBUG --capture=tee-sys ${REVERSE}
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/cov_e2e.html
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
  tags:
    - sertit
    - linux
    - high_memory
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "END_TO_END"'
      when: always
    - if: $CI_COMMIT_TAG
      when: always

#pytest_end_to_end310:
#  image: $EO_CONTAINER:geo_310
#  stage: test
#  variables:
#    # Use Dask for python 3.10
#    EOREADER_USE_DASK: "1"
#  before_script:
#    - python -m pip install --upgrade pip
#    - pip install --ignore-installed PyYAML
#    - pip install pytest coverage pytest-cov pylint
#    - pip install -e .
#  script:
#    - python -m pytest -v --durations=0 --cov-report term --cov-report html:${CI_PROJECT_DIR}/cov_e2e.html --cov=eoreader  --cov-config=.coveragerc ci/on_push --log-cli-level DEBUG --capture=tee-sys
#  artifacts:
#    paths:
#      - ${CI_PROJECT_DIR}/cov_e2e.html
#  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
#  tags:
#    - sertit
#    - linux
#    - high_memory
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "END_TO_END"'
#      when: always
#    - if: $CI_COMMIT_TAG
#      when: always
#  needs: [ "pytest_end_to_end" ]
#
#pytest_end_to_end311:
#  image: $EO_CONTAINER:geo_311
#  stage: test
#  variables:
#    # Use Dask for python 3.11
#    EOREADER_USE_DASK: "1"
#  before_script:
#    - python -m pip install --upgrade pip
#    - pip install --ignore-installed PyYAML
#    - pip install pytest coverage pytest-cov pylint
#    - pip install -e .
#  script:
#    - python -m pytest -v --durations=0 --cov-report term --cov-report html:${CI_PROJECT_DIR}/cov.html --cov=eoreader  --cov-config=.coveragerc ci/on_push --log-cli-level DEBUG --capture=tee-sys
#  artifacts:
#    paths:
#      - ${CI_PROJECT_DIR}/cov_e2e.html
#  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
#  tags:
#    - sertit
#    - linux
#    - high_memory
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "END_TO_END"'
#      when: always
#    - if: $CI_COMMIT_TAG
#      when: always
#  needs: [ "pytest_end_to_end310" ]

#pytest_end_to_end312:
#  image: $EO_CONTAINER:geo_312
#  stage: test
#  variables:
#    # Use Dask for python 3.11
#    EOREADER_USE_DASK: "1"
#  before_script:
#    - python -m pip install --upgrade pip
#    - pip install --ignore-installed PyYAML
#    - pip install pytest coverage pytest-cov pylint
#    - pip install -e .
#  script:
#    - python -m pytest -v --durations=0 --cov-report term --cov-report html:${CI_PROJECT_DIR}/cov_e2e.html --cov=eoreader  --cov-config=.coveragerc ci/on_push --log-cli-level DEBUG --capture=tee-sys
#  artifacts:
#    paths:
#      - ${CI_PROJECT_DIR}/cov_e2e.html
#  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
#  tags:
#    - sertit
#    - linux
#    - high_memory
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "END_TO_END"'
#      when: always
#    - if: $CI_COMMIT_TAG
#      when: always
#  needs: [ "pytest_end_to_end311" ]
#
#tox-linux-3.9:on-schedule:
#  image: $EO_CONTAINER:geo_39
#  stage: weekly_tests
#  before_script:
#    - python -m pip install --upgrade pip
#    - pip install tox
#  script:
#    - tox -c tox.ini -e py39
#  tags:
#    - sertit
#    - linux
#    - high_memory
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "WEEKLY"'
#
#tox-windows:on-schedule:
#  stage: weekly_tests
#  before_script:
#    - pip install tox
#  script:
#    - tox -c tox-conda.ini -e py39
#  tags:
#    - sertit
#    - windows
#    - high_memory
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "WEEKLY"'
#      when: always
#    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "windows"'
#      when: always
